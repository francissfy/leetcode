# https://docs.bazel.build/versions/master/be/c-cpp.html#cc_binary

cc_binary(
    name = "awesome_substring",
    srcs = ["awesome_substring.cpp"]
)

cc_binary(
    name = "longest_substr_with_limit_ae",
    srcs = ["longest_substr_with_limit_ae.cpp"]
)

cc_binary(
    name = "flip_col_max_num_equal_rows",
    srcs = ["flip_col_max_num_equal_rows.cpp"]
)

cc_binary(
    name = "largest_merge_two_strings",
    srcs = ["largest_merge_two_strings.cpp"]
)

cc_binary(
    name = "swap_char_in_lr",
    srcs = ["swap_char_in_lr.cpp"]
)

cc_binary(
    name = "power_of_two",
    srcs = ["power_of_two.cpp"]
)

cc_binary(
    name = "is_binary_search_tree",
    srcs = ["is_binary_search_tree.cpp"]
)

cc_binary(
    name = "restore_binary_tree",
    srcs = ["restore_binary_tree.cpp"]
)

cc_binary(
    name = "rm_redundant_in_list",
    srcs = ["rm_redundant_in_list.cpp"]
)

cc_binary(
    name = "subtree_sum_max_product",
    srcs = ["subtree_sum_max_product.cpp"]
)

cc_binary(
    name = "is_ugly_num",
    srcs = ["is_ugly_num.cpp"]
)

cc_binary(
    name = "minimum_in_rotated_sorted_array",
    srcs = ["minimum_in_rotated_sorted_array.cpp"]
)

cc_binary(
    name = "deck_of_cards",
    srcs = ["deck_of_cards.cpp"]
)

cc_binary(
    name = "last_k_nodes_in_list",
    srcs = ["last_k_nodes_in_list.cpp"]
)

cc_binary(
    name = "all_possible_full_binary_tree",
    srcs = ["all_possible_full_binary_tree.cpp"]
)

cc_binary(
    name = "post_order_visit",
    srcs = ["post_order_visit.cpp"]
)

cc_binary(
    name = "previsit_const_bstree",
    srcs = ["previsit_const_bstree.cpp"]
)

cc_binary(
    name = "tree_level_visit",
    srcs = ["tree_level_visit.cpp"]
)

cc_binary(
    name = "emotional_word",
    srcs = ["emotional_word.cpp"]
)

cc_binary(
    name = "xor_equal_triple",
    srcs = ["xor_equal_triple.cpp"]
)

cc_binary(
    name = "split2fibonacci",
    srcs = ["split2fibonacci.cpp"]
)

cc_binary(
    name = "sort_array",
    srcs = ["sort_array.cpp"]
)

cc_binary(
    name = "reverse_pairs",
    srcs = ["reverse_pairs.cpp"]
)

cc_binary(
    name = "best_coordinate",
    srcs = ["best_coordinate.cpp"]
)
